const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

async function testCache() {
  console.log('üß™ Testing cache system...\n');
  
  try {
    // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('1. Testing basic cache functionality:');
    const testResult = await axios.get(`${BASE_URL}/api/cache/test`);
    console.log('   Result:', testResult.data.message);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞
    console.log('\n2. Cache status:');
    const status = await axios.get(`${BASE_URL}/api/cache/status`);
    console.log('   Total keys:', status.data.totalKeys);
    console.log('   Image keys:', status.data.imageKeys);
    console.log('   Cache hits:', status.data.stats.hits);
    console.log('   Cache misses:', status.data.stats.misses);
    
    // 3. –¢–µ—Å—Ç API endpoints
    console.log('\n3. Testing cards API cache:');
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MISS)
    console.log('   First request:');
    const firstRequest = await axios.get(`${BASE_URL}/api/cards`);
    console.log('     X-Cache:', firstRequest.headers['x-cache']);
    console.log('     Time:', firstRequest.headers['date']);
    
    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HIT)
    console.log('   Second request:');
    await new Promise(resolve => setTimeout(resolve, 1000));
    const secondRequest = await axios.get(`${BASE_URL}/api/cards`);
    console.log('     X-Cache:', secondRequest.headers['x-cache']);
    console.log('     Time:', secondRequest.headers['date']);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('\n4. Cache status after requests:');
    const finalStatus = await axios.get(`${BASE_URL}/api/cache/status`);
    console.log('   Total keys:', finalStatus.data.totalKeys);
    console.log('   Cache hits:', finalStatus.data.stats.hits);
    console.log('   Cache misses:', finalStatus.data.stats.misses);
    
    console.log('\nüéâ Cache test completed!');
    
  } catch (error) {
    console.error('‚ùå Error testing cache:', error.message);
  }
}

testCache();