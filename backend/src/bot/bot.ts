import { Telegraf } from 'telegraf';
import { prisma } from '../db/client';
import { updateUsername } from '../admin/helpers';
import { 
  handleAdminCommand, 
  handleAdminCallback 
} from '../admin/handlers';
import { adminMessageMiddleware } from '../admin/messageHandler';

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function isUserSubscribed(userId: string): Promise<boolean> {
  try {
    const chatMember = await bot.telegram.getChatMember(
      process.env.TELEGRAM_CHANNEL_ID!,
      parseInt(userId)
    );
    return ['member', 'administrator', 'creator'].includes(chatMember.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// bot.ts - –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.use(async (ctx, next) => {
  if (ctx.from) {
    const userId = ctx.from.id.toString();
    const username = ctx.from.username;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (username) {
      await prisma.user.updateMany({
        where: { telegramId: userId },
        data: { username }
      });
    }
  }
  
  return next();
});

bot.command('admin', handleAdminCommand);
bot.action(/^admin_/, handleAdminCallback);
bot.action(/^edit_card_/, handleAdminCallback);
bot.action('admin_confirm_action', handleAdminCallback);
bot.action('admin_cancel_action', handleAdminCallback);
bot.action('confirm_action', handleAdminCallback);
bot.action('cancel_action', handleAdminCallback);
bot.action(/^user_logs_/, handleAdminCallback);
bot.action(/^logs_date_/, handleAdminCallback);
bot.use(adminMessageMiddleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();
  const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const isSubscribed = await isUserSubscribed(userId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
  const existingUser = await prisma.user.findUnique({
    where: { telegramId: userId }
  });

  const isNewUser = !existingUser;

  await prisma.user.upsert({
    where: { telegramId: userId },
    create: { 
      telegramId: userId, 
      username: ctx.from.username,
      isSubscribed 
    },
    update: { isSubscribed },
  });

  // –†–∞–∑–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (isNewUser) {
    await ctx.reply(
      `*–ü—Ä–∏–≤–µ—Ç, ${username}, –ª—é–±–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!* üèéÔ∏è

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MonoF1 - –∫–∞—Ä—Ç–æ—á–Ω—ã–π –±–æ—Ç –ø–æ –§–æ—Ä–º—É–ª–µ-1! 

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª

–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç:
‚Ä¢ üÉè Digital –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ –∏ –ø–∏–ª–æ—Ç–æ–≤
‚Ä¢ üéÆ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã
‚Ä¢ üèÜ –¢—É—Ä–Ω–∏—Ä—ã –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
‚Ä¢ üë• –ö—Ä—É—Ç–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ —Ñ–∞–Ω–∞—Ç–æ–≤ F1
‚Ä¢ üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –ø–æ–≥–Ω–∞–ª–∏!üö¶üèÅ
      `,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { 
                text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 
                url: `https://t.me/${process.env.TELEGRAM_CHANNEL_ID?.replace('@', '')}` 
              },
              { 
                text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 
                callback_data: 'check_subscription' 
              }
            ]
          ],
        },
      }
    );
  } else {
    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if (isSubscribed) {
      await ctx.reply(
        `*–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!* üèéÔ∏è‚ú®

–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ MonoF1 - –∫–∞—Ä—Ç–æ—á–Ω–æ–º –±–æ—Ç–µ –ø–æ –§–æ—Ä–º—É–ª–µ-1!

–¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–æ–Ω–∫—É! üö¶üèÅ

–ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞—Ö–æ–¥–∏—Ç—å –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö!
        `,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å', callback_data: 'how_to_play' },
                { text: 'üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', url: 'https://t.me/monof1_community' }
              ],
              [
                { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://monof1app.vercel.app' } }
              ]
            ],
          },
        }
      );
    } else {
      // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
      await ctx.reply(
        `*–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!* üèéÔ∏è

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª
        `,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { 
                  text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 
                  url: `https://t.me/${process.env.TELEGRAM_CHANNEL_ID?.replace('@', '')}` 
                },
                { 
                  text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 
                  callback_data: 'check_subscription' 
                }
              ]
            ],
          },
        }
      );
    }
  }
  
  if (!isSubscribed) {
    await ctx.reply('–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('check_subscription', async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    const isSubscribed = await isUserSubscribed(userId);

    if (isSubscribed) {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å', callback_data: 'how_to_play' },
              { text: 'üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', url: 'https://t.me/monof1_community' }
            ],
            [
              { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://monof1app.vercel.app' } }
            ]
          ]
        }
      });
      
      await prisma.user.update({
        where: { telegramId: userId },
        data: { isSubscribed: true },
      });
    } else {
      await ctx.answerCbQuery('–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª', { 
        show_alert: true 
      });
    }
  } catch (error) {
    console.error(error);
    await ctx.answerCbQuery('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏', {
      show_alert: true
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é
bot.action('how_to_play', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üéÆ *–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?*', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üÉè –ü–∞–∫–∏ –∫–∞—Ä—Ç', callback_data: 'card_packs_info' },
          { text: 'üèÜ –ö–∞—Ä—Ç—ã –ø–∏–ª–æ—Ç–æ–≤', callback_data: 'driver_cards_info' }
        ],
        [
          { text: 'üèÅ –ö–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥', callback_data: 'team_cards_info' },
          { text: 'üìö –û–±—É—á–µ–Ω–∏–µ', callback_data: 'tutorial_info' }
        ],
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–∞—Ö –∫–∞—Ä—Ç
bot.action('card_packs_info', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üÉè *–ü–∞–∫–∏ –∫–∞—Ä—Ç:*\n\n‚Ä¢ **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞–∫** - –±–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã\n‚Ä¢ **–†–µ–¥–∫–∏–π –ø–∞–∫** - –∫–∞—Ä—Ç—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏\n‚Ä¢ **–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–∞–∫** - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–∏–ª–æ—Ç–æ–≤\n‚Ä¢ **–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–∏** - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø—É—Å–∫–∏ –∫ –ì—Ä–∞–Ω-–ü—Ä–∏\n\n–ü–∞–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!', 
  {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é', callback_data: 'how_to_play' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–∞—Ö –ø–∏–ª–æ—Ç–æ–≤
bot.action('driver_cards_info', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üèÜ *–ö–∞—Ä—Ç—ã –ø–∏–ª–æ—Ç–æ–≤:*\n\n–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –ø–∏–ª–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n‚Ä¢ üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å, –æ–±–≥–æ–Ω, –∑–∞—â–∏—Ç–∞)\n‚Ä¢ üìà –£—Ä–æ–≤–µ–Ω—å –∏ —Ä–µ–¥–∫–æ—Å—Ç—å\n‚Ä¢ üéØ –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n‚Ä¢ üìñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π\n\n–°–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤—Å–µ—Ö –ø–∏–ª–æ—Ç–æ–≤ –§–æ—Ä–º—É–ª—ã-1!', 
  {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é', callback_data: 'how_to_play' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–∞—Ö –∫–æ–º–∞–Ω–¥
bot.action('team_cards_info', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üèÅ *–ö–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥:*\n\n–ö–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç:\n‚Ä¢ üèéÔ∏è –ë–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –ø–∏–ª–æ—Ç–æ–≤\n‚Ä¢ üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –∏—Å—Ç–æ—Ä–∏—é\n‚Ä¢ üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n‚Ä¢ ü§ù –°–∏–Ω–µ—Ä–≥–∏—é —Å –∫–∞—Ä—Ç–∞–º–∏ –ø–∏–ª–æ—Ç–æ–≤\n\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é dream-–∫–æ–º–∞–Ω–¥—É!', 
  {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é', callback_data: 'how_to_play' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—É—á–µ–Ω–∏—è
bot.action('tutorial_info', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üìö *–û–±—É—á–µ–Ω–∏–µ –∏ –≥–∞–π–¥—ã:*\n\n1. **–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã** - –∫–∞–∫ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ –ø–∞–∫–∏\n2. **–ì–æ–Ω–∫–∏** - —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–µ–∑–¥–∞—Ö –∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n3. **–¢—Ä–µ–π–¥–∏–Ω–≥** - –æ–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n4. **–ü—Ä–æ–∫–∞—á–∫–∞** - —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n5. **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏** - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ winning-–∫–æ–º–±–∏–Ω–∞—Ü–∏–π\n\n–í—Å—ë –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞ –≤ MonoF1!', 
  {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é', callback_data: 'how_to_play' }
        ]
      ]
    }
  });
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
bot.action('back_to_main', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
  const userId = ctx.from.id.toString();
  const isSubscribed = await isUserSubscribed(userId);
  
  if (isSubscribed) {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å', callback_data: 'how_to_play' },
            { text: 'üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', url: 'https://t.me/monof1_community' }
          ],
          [
            { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://monof1app.vercel.app' } }
          ]
        ]
      }
    });
  } else {
    await ctx.reply('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', {
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 
              url: `https://t.me/${process.env.TELEGRAM_CHANNEL_ID?.replace('@', '')}` 
            },
            { 
              text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 
              callback_data: 'check_subscription' 
            }
          ]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–±–ª–µ–º
bot.help(async (ctx) => {
  await ctx.reply(
    '–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!',
    {
      reply_markup: {
        inline_keyboard: [[
          { 
            text: 'üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 
            url: 'https://t.me/monof1_chanel' 
          },
          {
            text: 'üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
            url: 'https://t.me/monof1_community'
          }
        ]]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id.toString();
  const isSubscribed = await isUserSubscribed(userId);
  
  if (!isSubscribed) {
    await ctx.reply('–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª');
  } else {
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MonoF1! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  }
});

export default bot;