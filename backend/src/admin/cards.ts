import { Context } from 'telegraf';
import { prisma } from '../db/client';
import { adminStates } from './handlers';
import { findUser, findAllUsers } from './helpers';
import { logAction } from './utils';
import { handleBackToAdmin } from './utils';
import { BlobService } from '../services/blobService';
import { getCardEditKeyboard, getCardEditNavigationKeyboard, getCardsKeyboard } from './keyboards';

// Handlers from original handlers.ts
export async function handleUploadCards(ctx: Context) {
  await ctx.reply(
    'üì∏ *–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç*\n\n' +
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã\n' +
    '–¢–∏–ø (driver|duo|team|team_principal|track|car|collab|historical|race_results|limited|special)\n' +
    '–ö–æ–º–∞–Ω–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n' +
    '–†–µ–¥–∫–æ—Å—Ç—å (ultrasoft|supersoft|soft|medium|hard|intermediate|wet)\n' +
    '–û–ø–∏—Å–∞–Ω–∏–µ\n' +
    'ID –ø–∞–∫–∞\n\n' +
    '*–ü—Ä–∏–º–µ—Ä:*\n' +
    'Lewis Hamilton\n' +
    'driver\n' +
    'Mercedes\n' +
    'soft\n' +
    '7-–∫—Ä–∞—Ç–Ω—ã–π —á–µ–º–ø–∏–æ–Ω –º–∏—Ä–∞\n' +
    '1',
    { parse_mode: 'Markdown' }
  );
  adminStates.set(ctx.from!.id.toString(), { action: 'upload_cards_confirm' });
  await ctx.answerCbQuery();
}

export async function handleUploadCardsConfirm(ctx: Context) {
  await ctx.reply(
    '‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏*\n\n' +
    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç?',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', callback_data: 'admin_upload_cards_start' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_back' }
          ]
        ]
      }
    }
  );
  await ctx.answerCbQuery();
}

export async function handleUploadCardsStart(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'upload_cards' });
  await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
  await ctx.answerCbQuery();
}

export async function handleAddPack(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'add_pack' });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä: "Starter Pack|–ù–∞—á–∞–ª—å–Ω—ã–π –ø–∞–∫|500"');
  await ctx.answerCbQuery();
}

export async function handleEditCard(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'edit_card' });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
  await ctx.answerCbQuery();
}

export async function handleEditCardField(ctx: Context, field: string) {
  const userId = ctx.from!.id.toString();
  const state = adminStates.get(userId);
  if (!state || !state.data?.currentCard) {
    await ctx.reply('–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    adminStates.delete(userId);
    return;
  }

  adminStates.set(userId, { action: 'edit_card_enter_value', data: { ...state.data, field } });

  const fieldNames: Record<string, string> = {
    name: '–Ω–∞–∑–≤–∞–Ω–∏–µ',
    type: '—Ç–∏–ø (driver|duo|team|team_principal|track|car|collab|historical|race_results|limited|special)',
    team: '–∫–æ–º–∞–Ω–¥—É',
    rarity: '—Ä–µ–¥–∫–æ—Å—Ç—å (ultrasoft|supersoft|soft|medium|hard|intermediate|wet)',
    description: '–æ–ø–∏—Å–∞–Ω–∏–µ',
    packId: 'ID –ø–∞–∫–∞ (—á–∏—Å–ª–æ)',
    isDroppable: '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥—Ä–æ–ø–∞ (true/false)',
    dropLimit: '–ª–∏–º–∏—Ç –¥—Ä–æ–ø–∞ (—á–∏—Å–ª–æ)',
    year: '–≥–æ–¥ (—á–∏—Å–ª–æ)'
  };

  await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "${fieldNames[field]}" –∫–∞—Ä—Ç—ã ${state.data.currentCard.name}:`);
  await ctx.answerCbQuery();
}

export async function handleEditCardCancelField(ctx: Context) {
  const userId = ctx.from!.id.toString();
  const state = adminStates.get(userId);
  if (!state || !state.data?.currentCard) {
    await ctx.reply('–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    adminStates.delete(userId);
    return;
  }

  adminStates.set(userId, { action: 'edit_card_select', data: { currentCard: state.data.currentCard } });

  await ctx.reply(
    `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: ${state.data.currentCard.name}\n\n` +
    '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
    { reply_markup: getCardEditKeyboard() }
  );
  await ctx.answerCbQuery();
}

export async function handleEditCardContinue(ctx: Context) {
  const userId = ctx.from!.id.toString();
  const state = adminStates.get(userId);
  if (!state || !state.data?.currentCard) {
    await ctx.reply('–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    adminStates.delete(userId);
    return;
  }

  await ctx.reply(
    `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: ${state.data.currentCard.name}\n\n` +
    '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
    { reply_markup: getCardEditKeyboard() }
  );
  await ctx.answerCbQuery();
}

export async function handleEditAnotherCard(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'edit_card' });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
  await ctx.answerCbQuery();
}

export async function handleBackToAdminFromEdit(ctx: Context) {
  adminStates.delete(ctx.from!.id.toString());
  await handleBackToAdmin(ctx);
  await ctx.answerCbQuery();
}

export async function handleEditCardConfirm(ctx: Context) {
  const userId = ctx.from!.id.toString();
  const state = adminStates.get(userId);
  if (!state || !state.data?.currentCard) {
    await ctx.reply('–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    adminStates.delete(userId);
    return;
  }

  const { currentCard } = state.data;
  const cardId = currentCard.id;

  try {
    const updatedCard = await prisma.card.update({
      where: { id: cardId },
      data: currentCard
    });

    await logAction('CARD_UPDATE', userId, { cardId, changes: currentCard }, 'admin');
    await ctx.reply('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    adminStates.delete(userId);
    await handleBackToAdmin(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã.');
  }
  await ctx.answerCbQuery();
}

export async function handleCardsMenu(ctx: Context) {
  await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏:', { reply_markup: getCardsKeyboard() });
  await ctx.answerCbQuery();
}

export async function handleGiveCards(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'give_cards' });
  await ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    'username ID_–∫–∞—Ä—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n' +
    '–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n' +
    '–ü—Ä–∏–º–µ—Ä: "@username 123 5, 456 3, 789 1"\n\n' +
    '–ò–ª–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n' +
    'all ID_–∫–∞—Ä—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
  );
  await ctx.answerCbQuery();
}

export async function handleTakeCards(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'take_cards' });
  await ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑—ä—è—Ç–∏—è –∫–∞—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    'username ID_–∫–∞—Ä—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n' +
    '–ü—Ä–∏–º–µ—Ä: "@username 123 2"'
  );
  await ctx.answerCbQuery();
}

export async function handleViewCollection(ctx: Context) {
  adminStates.set(ctx.from!.id.toString(), { action: 'view_collection' });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:\n\n–ü—Ä–∏–º–µ—Ä: "@username"');
  await ctx.answerCbQuery();
}

// Handlers from original messageHandler.ts
export async function handleCardUpload(ctx: Context, state: any, photo: any, caption: string) {
  const [name, type, team, rarity, description, packIdStr] = caption.split('\n');
  const packId = parseInt(packIdStr);

  if (!name || !type || !rarity || isNaN(packId)) {
    return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å—å.');
  }

  const validTypes = ['driver', 'duo', 'team', 'team_principal', 'track', 'car', 'collab', 'historical', 'race_results', 'limited', 'special'];
  const validRarities = ['ultrasoft', 'supersoft', 'soft', 'medium', 'hard', 'intermediate', 'wet'];

  if (!validTypes.includes(type.trim())) {
    return await ctx.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${validTypes.join(', ')}`);
  }

  if (!validRarities.includes(rarity.trim())) {
    return await ctx.reply(`–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${validRarities.join(', ')}`);
  }

  try {
    const photoFile = await ctx.telegram.getFile(photo[photo.length - 1].file_id);
    const imageUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${photoFile.file_path}`;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Vercel Blob
    const fileName = `cards/${Date.now()}_${name.trim().toLowerCase().replace(/\s+/g, '_')}.png`;
    const blob = await BlobService.uploadImageFromUrl(imageUrl, fileName);

    const card = await prisma.card.create({
      data: {
        name: name.trim(),
        type: type.trim(),
        team: team?.trim() || null,
        rarity: rarity.trim(),
        description: description?.trim() || '',
        imageUrl: blob.url, // URL –æ—Ç Vercel Blob
        packId,
        isDroppable: true,
        dropLimit: 100,
        year: 2024
      }
    });

    await logAction('CARD_CREATE', ctx.from!.id.toString(), card, 'admin');
    await ctx.reply(`‚úÖ –ö–∞—Ä—Ç–∞ "${card.name}" —Å–æ–∑–¥–∞–Ω–∞!\nID: ${card.id}\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Vercel Blob`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

export async function handlePackCreation(ctx: Context, message: string) {
  const [name, description, priceStr] = message.split('|');
  const price = parseInt(priceStr);

  if (!name || isNaN(price)) {
    return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
  }

  const pack = await prisma.pack.create({
    data: { name: name.trim(), description: description?.trim(), price }
  });

  await logAction('PACK_CREATE', ctx.from!.id.toString(), pack, 'admin');
  await ctx.reply(`–ü–∞–∫ "${pack.name}" —Å–æ–∑–¥–∞–Ω! ID: ${pack.id}`);
}

export async function handleCardEdit(ctx: Context, cardIdStr: string) {
  const cardId = parseInt(cardIdStr);
  const card = await prisma.card.findUnique({ where: { id: cardId } });

  if (!card) {
    return await ctx.reply('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  const userId = ctx.from!.id.toString();
  adminStates.set(userId, { action: 'edit_card_select', data: { cardId, currentCard: card } });

  await ctx.reply(
    `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: ${card.name}\n\n` +
    '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
    { reply_markup: getCardEditKeyboard() }
  );
}

export async function handleCardEditEnterValue(ctx: Context, messageText: string, state: any) {
  const userId = ctx.from!.id.toString();
  const { field, currentCard } = state.data;
  let newValue: any = messageText.trim();

  const validTypes = ['driver', 'duo', 'team', 'team_principal', 'track', 'car', 'collab', 'historical', 'race_results', 'limited', 'special'];
  const validRarities = ['ultrasoft', 'supersoft', 'soft', 'medium', 'hard', 'intermediate', 'wet'];

  switch (field) {
    case 'type':
      if (!validTypes.includes(newValue)) {
        return await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${validTypes.join(', ')}`);
      }
      break;
    case 'rarity':
      if (!validRarities.includes(newValue)) {
        return await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${validRarities.join(', ')}`);
      }
      break;
    case 'packId':
    case 'dropLimit':
    case 'year':
      newValue = parseInt(newValue);
      if (isNaN(newValue)) {
        return await ctx.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
      }
      break;
    case 'isDroppable':
      newValue = newValue.toLowerCase() === 'true';
      if (typeof newValue !== 'boolean') {
        return await ctx.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true –∏–ª–∏ false.');
      }
      break;
  }

  const updatedCard = { ...currentCard, [field]: newValue };
  adminStates.set(userId, { action: 'edit_card_confirm', data: { currentCard: updatedCard } });

  await ctx.reply(
    `–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${field}: ${newValue}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
    { reply_markup: getCardEditNavigationKeyboard() }
  );
}

export async function handleGiveCardsAction(ctx: Context, messageText: string) {
  const parts = messageText.split(' ');
  const target = parts[0].toLowerCase();
  const cardDataStr = parts.slice(1).join(' ');

  const cardEntries = cardDataStr.split(',').map(entry => {
    const [cardIdStr, quantityStr] = entry.trim().split(' ');
    return { cardId: parseInt(cardIdStr), quantity: parseInt(quantityStr) };
  });

  if (cardEntries.some(({ cardId, quantity }) => isNaN(cardId) || isNaN(quantity))) {
    return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç');
  }

  if (target === 'all') {
    let totalGiven = 0;
    for (const { cardId, quantity } of cardEntries) {
      const givenCount = await giveCardsToAllUsers(cardId, quantity, ctx.from!.id.toString());
      totalGiven += givenCount * quantity;
    }
    await ctx.reply(`‚úÖ –í—ã–¥–∞–Ω–æ ${totalGiven} –∫–∞—Ä—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
  } else {
    const username = target.replace('@', '');
    const user = await findUser(username);
    if (!user) {
      return await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    for (const { cardId, quantity } of cardEntries) {
      const card = await prisma.card.findUnique({ where: { id: cardId }, select: { name: true } });
      if (!card) {
        await ctx.reply(`‚ùå –ö–∞—Ä—Ç–∞ —Å ID ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        continue;
      }
      await giveCardsToUser(user.id, cardId, quantity, ctx.from!.id.toString());
      await logAction('CARDS_GIVE', user.id, { cardId, cardName: card.name, quantity }, ctx.from!.id.toString());
    }
    await ctx.reply(`‚úÖ –í—ã–¥–∞–Ω–æ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${user.username}`);
  }
}

export async function handleTakeCardsAction(ctx: Context, messageText: string) {
  const [usernameInput, cardIdStr, quantityStr] = messageText.split(' ');
  const username = usernameInput.replace('@', '');
  const cardId = parseInt(cardIdStr);
  const quantity = parseInt(quantityStr);

  if (isNaN(cardId) || isNaN(quantity)) {
    return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
  }

  const user = await findUser(username);
  if (!user) {
    return await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  await takeCardsFromUser(user.id, cardId, quantity, ctx.from!.id.toString());
  await logAction('CARDS_TAKE', user.id, { cardId, quantity }, ctx.from!.id.toString());
  await ctx.reply(`‚úÖ –ò–∑—ä—è—Ç–æ ${quantity} –∫–∞—Ä—Ç (ID: ${cardId}) —É @${user.username}`);
}

export async function handleViewCollectionAction(ctx: Context, messageText: string) {
  const username = messageText.trim().replace('@', '');
  const user = await findUser(username);
  if (!user) {
    return await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  const collection = await getUserCollection(user.id);
  if (collection.length === 0) {
    return await ctx.reply(`–ö–æ–ª–ª–µ–∫—Ü–∏—è @${user.username} –ø—É—Å—Ç–∞`);
  }

  const rarityOrder = ['ultrasoft', 'supersoft', 'soft', 'medium', 'hard', 'intermediate', 'wet'];
  const groupedByRarity = collection.reduce((acc: Record<string, any[]>, item) => {
    const rarity = item.card.rarity;
    acc[rarity] = acc[rarity] || [];
    acc[rarity].push(item);
    return acc;
  }, {});

  let response = `üóÇ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user.username || user.telegramId}\n\n`;
  let uniqueCards = 0;
  let totalCards = 0;

  for (const rarity of rarityOrder) {
    const cards = groupedByRarity[rarity] || [];
    if (!cards.length) continue;

    response += `üìå ${rarity.toUpperCase()}:\n`;
    uniqueCards += cards.length;
    totalCards += cards.reduce((sum, item) => sum + item.quantity, 0);

    cards.slice(0, 10).forEach(item => {
      response += `‚Ä¢ ${item.card.name} (x${item.quantity})\n`;
    });

    if (cards.length > 10) {
      response += `‚Ä¢ ... –∏ –µ—â–µ ${cards.length - 10} –∫–∞—Ä—Ç\n`;
    }
    response += '\n';
  }

  response += `üìä –ò—Ç–æ–≥–æ: ${uniqueCards} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç, ${totalCards} –≤—Å–µ–≥–æ`;

  const maxLength = 4000;
  let parts = [];
  while (response.length > maxLength) {
    let part = response.substring(0, maxLength);
    let lastNewline = part.lastIndexOf('\n');
    parts.push(response.substring(0, lastNewline > 0 ? lastNewline : maxLength));
    response = response.substring(lastNewline > 0 ? lastNewline + 1 : maxLength);
  }
  parts.push(response);

  for (const part of parts) {
    await ctx.reply(part);
  }
}

// Functions from original helpers.ts
export async function giveCardsToUser(userId: number, cardId: number, quantity: number, issuedBy: string) {
  const existing = await prisma.userCard.findUnique({ where: { userId_cardId: { userId, cardId } } });

  if (existing) {
    return prisma.userCard.update({
      where: { userId_cardId: { userId, cardId } },
      data: { quantity: existing.quantity + quantity }
    });
  }

  return prisma.userCard.create({ data: { userId, cardId, quantity } });
}

export async function takeCardsFromUser(userId: number, cardId: number, quantity: number, takenBy: string) {
  const existing = await prisma.userCard.findUnique({ where: { userId_cardId: { userId, cardId } } });
  if (!existing) throw new Error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã');
  if (existing.quantity < quantity) throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç. –¢–æ–ª—å–∫–æ ${existing.quantity} —à—Ç.`);

  if (existing.quantity === quantity) {
    return prisma.userCard.delete({ where: { userId_cardId: { userId, cardId } } });
  }

  return prisma.userCard.update({
    where: { userId_cardId: { userId, cardId } },
    data: { quantity: existing.quantity - quantity }
  });
}

export async function getUserCollection(userId: number) {
  return prisma.userCard.findMany({
    where: { userId },
    include: { card: { select: { id: true, name: true, type: true, rarity: true, team: true } } },
    orderBy: [{ card: { rarity: 'asc' } }, { card: { name: 'asc' } }]
  });
}

export async function giveCardsToAllUsers(cardId: number, quantity: number, issuedBy: string) {
  const users = await findAllUsers();
  const card = await prisma.card.findUnique({ where: { id: cardId }, select: { name: true } });
  if (!card) throw new Error(`–ö–∞—Ä—Ç–∞ —Å ID ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

  let givenCount = 0;
  for (const user of users) {
    try {
      await giveCardsToUser(user.id, cardId, quantity, issuedBy);
      await logAction('CARDS_GIVE', user.id, { cardId, cardName: card.name, quantity }, issuedBy);
      givenCount++;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
    }
  }
  return givenCount;
}