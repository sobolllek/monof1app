generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  telegramId       String    @unique
  username         String?
  firstName        String?
  lastName         String?
  isSubscribed     Boolean   @default(false)
  isAdmin          Boolean   @default(false)
  balance          Int       @default(0)
  banned           Boolean   @default(false)
  bannedUntil      DateTime?
  restrictedUntil  DateTime?
  warningsCount    Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  cards        UserCard[]
  transactions Transaction[]
  logs         Log[]
  warnings     Warning[]
  bans         Ban[]

  @@map("User")
}

model Card {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  team        String?
  description String?
  imageUrl    String
  rarity      String
  price       Int       @default(0)
  packId      Int
  pack        Pack      @relation(fields: [packId], references: [id], onDelete: Cascade)
  isDroppable Boolean   @default(true)
  dropLimit   Int       @default(100)
  year        Int       @default(2024)
  isHidden    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userCards UserCard[]

  @@index([type])
  @@index([rarity])
  @@index([packId])
  @@index([isDroppable])
  @@index([year])
  @@map("Card")
}

model Pack {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  cards Card[]

  @@map("Pack")
}

model UserCard {
  id        Int      @id @default(autoincrement())
  userId    Int
  cardId    Int
  quantity  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, cardId])
  @@map("UserCard")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Int
  type      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@map("Transaction")
}

model Log {
  id          Int      @id @default(autoincrement())
  action      String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  details     Json?
  performedBy String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("Log")
}

model Ban {
  id        Int      @id @default(autoincrement())
  reason    String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bannedBy  String
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@index([userId])
  @@index([expiresAt])
  @@map("Ban")
}

model Warning {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    String
  issuedBy  String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("Warning")
}